// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var fermenting = Fermenting.FromJson(jsonString);

namespace QuickType
{
	using System;
	using System.Collections.Generic;

	using System.Globalization;
	using Newtonsoft.Json;
	using Newtonsoft.Json.Converters;

	public partial class Fermenting
	{
		[JsonProperty("_id")]
		public string Id { get; set; }

		[JsonProperty("name")]
		public string Name { get; set; }

		[JsonProperty("batchNo")]
		public long BatchNo { get; set; }

		[JsonProperty("status")]
		public string Status { get; set; }

		[JsonProperty("brewer")]
		public string Brewer { get; set; }

		[JsonProperty("brewDate")]
		public long BrewDate { get; set; }

		[JsonProperty("recipe")]
		public Recipe Recipe { get; set; }

		[JsonProperty("measuredOg")]
		public double MeasuredOg { get; set; }
	}

	public partial class Recipe
	{
		[JsonProperty("name")]
		public string Name { get; set; }
	}

	public partial class Fermenting
	{
		public static Fermenting[] FromJson(string json) => JsonConvert.DeserializeObject<Fermenting[]>(json, QuickType.Converter.Settings);
	}

	public static partial class Serialize
	{
		public static string ToJson(this Fermenting[] self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
	}

	internal static partial class Converter
	{
		public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
		{
			MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
			DateParseHandling = DateParseHandling.None,
			Converters =
			{
				new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
			},
		};
	}
}
