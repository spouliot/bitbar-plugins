// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var conditioning = Conditioning.FromJson(jsonString);

namespace QuickType
{
	using System;
	using System.Collections.Generic;

	using System.Globalization;
	using Newtonsoft.Json;
	using Newtonsoft.Json.Converters;

	public partial class Conditioning
	{
		[JsonProperty("_id")]
		public string Id { get; set; }

		[JsonProperty("name")]
		public string Name { get; set; }

		[JsonProperty("batchNo")]
		public long BatchNo { get; set; }

		[JsonProperty("status")]
		public string Status { get; set; }

		[JsonProperty("brewer")]
		public string Brewer { get; set; }

		[JsonProperty("brewDate")]
		public long BrewDate { get; set; }

		[JsonProperty("recipe")]
		public Recipe Recipe { get; set; }

		[JsonProperty("measuredAbv")]
		public double MeasuredAbv { get; set; }

		[JsonProperty("notes")]
		public Note[] Notes { get; set; }
	}

	public partial class Note
	{
		[JsonProperty("timestamp")]
		public long Timestamp { get; set; }

		[JsonProperty("note")]
		public string NoteNote { get; set; }

		[JsonProperty("status")]
		public string Status { get; set; }

		[JsonProperty("type")]
		public string Type { get; set; }
	}

	public partial class Conditioning
	{
		public static Conditioning[] FromJson(string json) => JsonConvert.DeserializeObject<Conditioning[]>(json, QuickType.Converter.Settings);
	}

	public static partial class Serialize
	{
		public static string ToJson(this Conditioning[] self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
	}

}
